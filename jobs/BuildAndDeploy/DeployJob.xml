<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.40">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.jira.JiraProjectProperty plugin="jira@3.1.3"/>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.31">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>Deploy</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>Execute</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.RunParameterDefinition>
          <name>Build</name>
          <description></description>
          <projectName>Core/ProofOfConcept/Seamless/OldStuff/BuildJob</projectName>
          <filter>SUCCESSFUL</filter>
        </hudson.model.RunParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <EnvInjectJobProperty plugin="envinject@2.3.0">
      <info>
        <secureGroovyScript plugin="script-security@1.75">
          <script></script>
          <sandbox>false</sandbox>
        </secureGroovyScript>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
      <on>true</on>
      <keepJenkinsSystemVariables>true</keepJenkinsSystemVariables>
      <keepBuildVariables>true</keepBuildVariables>
      <overrideBuildParameters>false</overrideBuildParameters>
    </EnvInjectJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.87">
    <script>pipeline{
    agent any
    
    environment {
        topArchiveDir=&quot;/archive/builds&quot;
        remoteHost=&quot;meldevcore03z.sms.foxtel.com.au&quot;
        remotePath=&quot;/archive/DEVELOPMENT&quot;
        remoteUser=&quot;cbsuser&quot;
    }
    
    stages {
        stage(&apos;prepare&apos;) {
            steps {
                script {
                    if (env.Build) {
                        env.BuildVersion=env.Build_NAME
                    }
                    
                    topArchiveDir=&quot;/archive/builds&quot;
                    
                    if(env.Build) {
                        buildJob=env.Build_JOBNAME
                        buildNum=env.Build_NUMBER
                        
                        artifactFullPath = sh (
                                script: &quot;find ${topArchiveDir}/${buildJob}/${buildNum} -name &apos;fxtl*-${BuildVersion}_*.jar&apos;&quot;,
                                returnStdout: true
                            ).trim()
                        
                        echo &quot;$buildJob&quot;
                        echo &quot;$buildNum&quot;
                        
                        artifact = sh (
                            script: &quot;basename ${artifactFullPath}&quot;,
                            returnStdout: true
                        ).trim()
                        
                        echo &quot;$artifact&quot;
                    }
                }
                
            }
        }
        
        stage(&apos;deploy&apos;) {
             when {
                expression { env.Deploy == &quot;true&quot; }
            }
            steps {
                echo &quot;Artifact full path: ${artifactFullPath}&quot;
                    
                echo &quot;================================================&quot;
                echo &quot;Uploading `du -sh --apparent-size ${artifactFullPath}`&quot;
                echo &quot;================================================&quot;
                withCredentials([string(credentialsId: &apos;SSH_KEY_PASSPHRASE&apos;, variable: &apos;SSHPASS&apos;)]) {
                    sh (&quot;rsync --rsh=&apos;sshpass -e -P assphrase ssh -o PreferredAuthentications=publickey -o PasswordAuthentication=no -l ${env.remoteUser}&apos; --chmod=777 ${artifactFullPath} ${env.remoteHost}:${env.remotePath}&quot;)
                }
                
                echo &apos;Uploaded successfully ...&apos;
            }
        }
        
        
        
        stage(&apos;execute&apos;) {
            when {
                expression { env.Execute == &quot;true&quot; }
            }
            steps {
                echo &quot;Here we need to execute java -jar ${env.remotePath}/${artifact} on the remote server&quot;
                withCredentials([string(credentialsId: &apos;SSH_KEY_PASSPHRASE&apos;, variable: &apos;SSHPASS&apos;)]) {
                    //sh (&quot;sshpass -e -P assphrase ssh -o PreferredAuthentications=publickey -o PasswordAuthentication=no -l ${env.remoteUser}@${env.remoteHost} &apos;java -jar ${env.remotePath}/${artifact}&apos;&quot;)
                    //sh(&quot;sshpass -p P@ssw0rd ssh cbsuser@meldevcore03z.sms.foxtel.com.au &apos;java -jar  /archive/DEVELOPMENT/fxtl-feature-readFromBuildProperties.5_6c2150488dd.jar&apos;&quot;)
                    //sh (&quot;java -jar ${env.remoteUser}@${env.remoteHost}:${env.remotePath}/${artifact}&quot;)
                    //This works partially
                    //sh (&quot;sshpass -e -P assphrase ssh -o PreferredAuthentications=publickey -o PasswordAuthentication=no -l ${env.remoteUser} ${env.remoteHost} &apos;java -jar ${env.remoteHost}:${env.remotePath}/${artifact}&apos;&quot;)
                    sh (&quot;sshpass -e -P assphrase ssh -o PreferredAuthentications=publickey -o PasswordAuthentication=no -l ${env.remoteUser} ${env.remoteHost} &apos;java -jar ${env.remotePath}/${artifact}&apos;&quot;)
                }
                echo &apos;Executed successfully ...&apos;
            }
        }
    }
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>